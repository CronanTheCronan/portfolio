<footer>
		<!-- Back to top
		fun logos -->
	</footer>
	<script>
	      var yelpCampSite = "https://matt-cronan.herokuapp.com/projects/yc";
        var rgbSite = "https://matt-cronan.herokuapp.com/projects/ColorGame";
        var mountainSite = "https://matt-cronan.herokuapp.com/projects/MountainTravel";
        var patatapSite = "https://matt-cronan.herokuapp.com/projects/PatatapClone";
        var yelpCampDisp = "<p>YelpCamp is my final project for the Web Development Bootcamp ran by Colt Steele. It was built using Node and Express with MongoDB serving as the database. The logins for this site have been disabled and are for demonstration purposes only, however they are functional and use passport for authentication. Each campsite added by the user also takes in an address or zip code which uses Google Maps API to provide a map of the location.  Users can post new campgrounds as well as post comments about their camp experience.</p>";
        var rgbDisp = "<p>This simple color game was built using HTML, CSS, and vanilla Javascript. The game displays an RGB code and the user chooses between 3 or 6 different colors (depending on the mode selected.)</p>";
        var mountainDisp = "<p>This is a single page application designed for a startup company.  It uses a lot of CSS Flexbox for styling purposes.</p>"
        var patatapDisp = "<p>This is a cool app emulated after Patatap.com site. It uses two JS libraries (paper.js for graphics and howler.js for sound). The alphabet keys are each mapped with a unique sound and an image will appear when one is pressed. </p>"
        // var canvas = document.getElementById("mycanvas");
        // var img    = canvas.toDataURL("image/png");

        
        $("#yelpcampBtn").click(function(){
          $("#iframe").attr({
            'src': yelpCampSite,
            'height': 750,
            'width': 500 
          });
          $("#projectBtnLink").attr('href', yelpCampSite);
          $("#projectInfo").html(yelpCampDisp);
        });
        
        $("#rgbBtn").click(function(){
            $("#iframe").attr({
              'src': rgbSite,
              'height': 700,
              'width': 750
            });
            $("#projectBtnLink").attr('href', rgbSite);
            $("#projectInfo").html(rgbDisp);
        });
        
        $("#mountainBtn").click(function(){
        	$("#iframe").attr({
        	  'src': mountainSite,
        	  'height': 750,
        	  'width': 500
        	});
        	$("#projectBtnLink").attr('href', mountainSite);
        	$("#projectInfo").html(mountainDisp);
        });
        
        $("#patatapBtn").click(function(){
        	$("#iframe").attr({
        	  'src': patatapSite,
        	  'height': 350,
        	  'width': 750
        	});
        	$("#projectBtnLink").attr('href', patatapSite);
        	$("#projectInfo").html(patatapDisp);
        });
        
        $("#trigger").click(function(){
            $('.hiddenCanvas').addClass('shownCanvas').removeClass('hiddenCanvas');
            $('.hiddenP').addClass('shownP').removeClass('hiddenP');
        });
        
        $('#triggerClose').click(function(){
          $('.shownCanvas').addClass('hiddenCanvas').removeClass('shownCanvas');
          $('.shownP').addClass('hiddenP').removeClass('shownP');
        });
        
        // $("#printResume").click(function(){ print_resume(); });
        
        // If absolute URL from the remote server is provided, configure the CORS
        // header on that server.
        var url = '/assets/CronanResume.pdf';
        
        // Disable workers to avoid yet another cross-origin issue (workers need
        // the URL of the script to be loaded, and dynamically loading a cross-origin
        // script does not work).
        // PDFJS.disableWorker = true;
        
        // The workerSrc property shall be specified.
        PDFJS.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';
        
        // Asynchronous download of PDF
        var loadingTask = PDFJS.getDocument(url);
        loadingTask.promise.then(function(pdf) {
          console.log('PDF loaded');
          
          // Fetch the first page
          var pageNumber = 1;
          pdf.getPage(pageNumber).then(function(page) {
            console.log('Page loaded');
            
            var scale = 1.5;
            var viewport = page.getViewport(scale);
        
            // Prepare canvas using PDF page dimensions
            var canvas = document.getElementById('the-canvas');
            var context = canvas.getContext('2d');
            canvas.height = viewport.height;
            canvas.width = viewport.width;
        
            // Render PDF page into canvas context
            var renderContext = {
              canvasContext: context,
              viewport: viewport
            };
            var renderTask = page.render(renderContext);
            renderTask.then(function () {
              console.log('Page rendered');
            });
          });
        }, function (reason) {
          // PDF loading error
          console.error(reason);
      });
      
    //   function print_resume(documentId) {
    //     var doc = document.querySelector('#pdfDocument');
    
    //     //Wait until PDF is ready to print    
    //     if (typeof doc.print === 'undefined') {    
    //         setTimeout(function(){printDocument(documentId);}, 1000);
    //     } else {
    //         doc.print();
    //     }
    // }
	</script>
</body>
</html>